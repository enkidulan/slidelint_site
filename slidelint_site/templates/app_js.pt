LinterApp = angular.module('LinterApp', ['angularFileUpload', 'ui.bootstrap']);

function bytesToSize(bytes) {
   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
   if (bytes == 0) return '0 Bytes';
   var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
   return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
};

var LinterCtrl = ['$scope', '$upload', '$http', '$timeout', '$modal',
  function($scope, $upload, $http, $timeout, $modal) {
  $scope.state = 'upload';
  $scope.check_rule = 'simple';
  $scope.validation_error = null;
  $scope.job_uid = false;
  $scope.done = false;
  $scope.error = false;
  $scope.results = [];
  $scope.max_allowed_size = ${max_allowed_size};
  $scope.count = ${count};
  $scope.feedback = "";
  $scope.feedback_status = false;
  $scope.show_upload = function(){
    $scope.job_uid = false;
    $scope.uploading_progress = 0;
    $scope.done = false;
    $scope.feedback = "";
    $scope.feedback_status = false;
    $scope.state = 'upload';
  };
  $scope.leave_feedback = function(){
    $scope.feedback = window.document.getElementById('feedback').value;
    if ($scope.feedback !== ""){
      $http.post('/feedback', {'uid': $scope.job_uid, 'message': $scope.feedback},
          {headers: {'Content-Type': 'application/json'}})
        .success(function(data, status, headers, config) {
            $scope.feedback_status = "Thanks for feedback!";
        }).
        error(function(data, status, headers, config) {
          // called asynchronously if an error occurs
          // or server returns response with an error status.
          $scope.feedback_status = "Sorry we can't receive your feedback right now..";
        });
    }
    else {
      $scope.feedback_status = "Please write feedback first";
    }

  };
  $scope.getResults = function(){
    if (!$scope.done && $scope.job_uid){
      $http.post('/results', {'uid': $scope.job_uid},
          {headers: {'Content-Type': 'application/json'}})
        .success(function(data, status, headers, config) {
            $scope.icons = data.icons;
            $scope.results = data.result;
            $scope.state = 'results';
            $scope.done = true;
        }).
        error(function(data, status, headers, config) {
          // called asynchronously if an error occurs
          // or server returns response with an error status.
          if (status === 500) {
              $scope.error = data.result;
              $scope.state = 'results';
              $scope.done = true;
          };
        });
    };
  };
  $scope.intervalFunction = function(){
    $timeout(function() {
      $scope.getResults();
      $scope.intervalFunction();
    }, 3000)
  };
  $scope.intervalFunction();
  $scope.onFileSelect = function($files) {
    // $files: an array of files selected, each file has name, size, and type.
    for (var i = 0; i < $files.length; i++) {
      var file = $files[i];
      if (file.size > $scope.max_allowed_size){
        $scope.validation_error = 'file is too large, its size ';
        $scope.validation_error += bytesToSize(file.size);
        $scope.validation_error += ', but max allowed size is ';
        $scope.validation_error += bytesToSize($scope.max_allowed_size);
        return
      };
      if (file.type != 'application/pdf'){
        $scope.validation_error = 'file type is wrong - only PDF files are allowed';
        return
      };
      $scope.upload = $upload.upload({
        url: '/',
        // method: POST or PUT,
        // headers: {'headerKey': 'headerValue'}, withCredential: true,
        data: {check_rule: $scope.check_rule},
        file: file,
        // file: $files, //upload multiple files, this feature only works in HTML5 FromData browsers
        /* set file formData name for 'Content-Desposition' header. Default: 'file' */
        //fileFormDataName: myFile,
        /* customize how data is added to formData. See #40#issuecomment-28612000 for example */
        //formDataAppender: function(formData, key, val){}
      }).progress(function(evt) {
        $scope.uploading_progress = parseInt(100.0 * evt.loaded / evt.total);
      }).success(function(data, status, headers, config) {
        // file is uploaded successfully
        // data = JSON.parse(data);
        uid = data.uid;
        rez_status = data.status;
        $scope.job_uid = uid;
        $scope.state = 'progress';
      }).error(function(data, status, headers, config) {
         $scope.validation_error = data.error;
      });
    }
  };

}];
